import type { FromSchema } from 'json-schema-to-ts';
import type { entityCatalogSpecificCatalogSchema } from '../entities-catalog-config-schema';
export type EntityCatalogSpecificCatalogConfig = FromSchema<typeof entityCatalogSpecificCatalogSchema>;
export type CatalogConfigEntityExclude = {
    key: string;
};
export type CatalogConfigEntityInclude = {
    type: string;
};
export type CatalogConfigEntityFilter = {
    title: string;
    titleTranslationKey?: string;
    parentFilter?: string;
    valuesMapping?: Record<string, string>;
    missingCategoryName?: string;
    missingCategoryNameTranslationKey?: string;
    property: string;
    type?: 'select' | 'checkboxes' | 'date-range';
    options?: string[];
    hide?: boolean;
    label?: string;
};
export type CatalogEntityConfig = {
    slug?: string;
    hide?: boolean;
    excludes?: CatalogConfigEntityExclude[];
    includes?: CatalogConfigEntityInclude[];
    filters?: CatalogConfigEntityFilter[];
    titleTranslationKey?: string;
    descriptionTranslationKey?: string;
    catalogSwitcherLabelTranslationKey?: string;
};
export type EntitiesCatalogConfigTypes = {
    catalogs?: {
        all?: EntityCatalogSpecificCatalogConfig;
        services?: EntityCatalogSpecificCatalogConfig;
        domains?: EntityCatalogSpecificCatalogConfig;
        teams?: EntityCatalogSpecificCatalogConfig;
        users?: EntityCatalogSpecificCatalogConfig;
        apiDescriptions?: EntityCatalogSpecificCatalogConfig;
        dataSchemas?: EntityCatalogSpecificCatalogConfig;
        apiOperations?: EntityCatalogSpecificCatalogConfig;
        [catalogName: string]: EntityCatalogSpecificCatalogConfig | undefined;
    };
};
