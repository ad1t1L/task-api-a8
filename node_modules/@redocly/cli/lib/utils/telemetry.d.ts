import type { ExitCode } from './miscellaneous.js';
import type { ArazzoDefinition, Config } from '@redocly/openapi-core';
import type { Arguments } from 'yargs';
import type { CommandArgv } from '../types.js';
export type Analytics = {
    event: string;
    event_time: string;
    logged_in: 'yes' | 'no';
    command: string;
    arguments: string;
    node_version: string;
    npm_version: string;
    os_platform: string;
    version: string;
    exit_code: ExitCode;
    environment?: string;
    metadata?: string;
    environment_ci?: string;
    raw_input: string;
    has_config?: 'yes' | 'no';
    spec_version?: string;
    spec_keyword?: string;
    spec_full_version?: string;
    respect_x_security_auth_types?: string;
};
export declare function sendTelemetry({ config, argv, exit_code, spec_version, spec_keyword, spec_full_version, respect_x_security_auth_types, }: {
    config: Config | undefined;
    argv: Arguments<CommandArgv> | undefined;
    exit_code: ExitCode;
    spec_version: string | undefined;
    spec_keyword: string | undefined;
    spec_full_version: string | undefined;
    respect_x_security_auth_types: string[] | undefined;
}): Promise<void>;
export declare function collectXSecurityAuthTypes(document: Partial<ArazzoDefinition>, respectXSecurityAuthTypesAndSchemeName: string[]): void;
export declare function cleanArgs(parsedArgs: CommandArgv, rawArgv: string[]): {
    arguments: string;
    raw_input: string;
};
//# sourceMappingURL=telemetry.d.ts.map