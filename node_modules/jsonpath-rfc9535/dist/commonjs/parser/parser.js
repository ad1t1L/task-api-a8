"use strict";
// @generated by Peggy 4.2.0.
//
// https://peggyjs.org/
Object.defineProperty(exports, "__esModule", { value: true });
exports.StartRules = void 0;
exports.SyntaxError = peg$SyntaxError;
exports.parse = peg$parse;
function peg$subclass(child, parent) {
    function C() { this.constructor = child; }
    C.prototype = parent.prototype;
    child.prototype = new C();
}
function peg$SyntaxError(message, expected, found, location) {
    var self = Error.call(this, message);
    // istanbul ignore next Check is a necessary evil to support older environments
    if (Object.setPrototypeOf) {
        Object.setPrototypeOf(self, peg$SyntaxError.prototype);
    }
    self.expected = expected;
    self.found = found;
    self.location = location;
    self.name = "SyntaxError";
    return self;
}
peg$subclass(peg$SyntaxError, Error);
function peg$padEnd(str, targetLength, padString) {
    padString = padString || " ";
    if (str.length > targetLength) {
        return str;
    }
    targetLength -= str.length;
    padString += padString.repeat(targetLength);
    return str + padString.slice(0, targetLength);
}
peg$SyntaxError.prototype.format = function (sources) {
    var str = "Error: " + this.message;
    if (this.location) {
        var src = null;
        var k;
        for (k = 0; k < sources.length; k++) {
            if (sources[k].source === this.location.source) {
                src = sources[k].text.split(/\r\n|\n|\r/g);
                break;
            }
        }
        var s = this.location.start;
        var offset_s = (this.location.source && (typeof this.location.source.offset === "function"))
            ? this.location.source.offset(s)
            : s;
        var loc = this.location.source + ":" + offset_s.line + ":" + offset_s.column;
        if (src) {
            var e = this.location.end;
            var filler = peg$padEnd("", offset_s.line.toString().length, ' ');
            var line = src[s.line - 1];
            var last = s.line === e.line ? e.column : line.length + 1;
            var hatLen = (last - s.column) || 1;
            str += "\n --> " + loc + "\n"
                + filler + " |\n"
                + offset_s.line + " | " + line + "\n"
                + filler + " | " + peg$padEnd("", s.column - 1, ' ')
                + peg$padEnd("", hatLen, "^");
        }
        else {
            str += "\n at " + loc;
        }
    }
    return str;
};
peg$SyntaxError.buildMessage = function (expected, found) {
    var DESCRIBE_EXPECTATION_FNS = {
        literal: function (expectation) {
            return "\"" + literalEscape(expectation.text) + "\"";
        },
        class: function (expectation) {
            var escapedParts = expectation.parts.map(function (part) {
                return Array.isArray(part)
                    ? classEscape(part[0]) + "-" + classEscape(part[1])
                    : classEscape(part);
            });
            return "[" + (expectation.inverted ? "^" : "") + escapedParts.join("") + "]";
        },
        any: function () {
            return "any character";
        },
        end: function () {
            return "end of input";
        },
        other: function (expectation) {
            return expectation.description;
        }
    };
    function hex(ch) {
        return ch.charCodeAt(0).toString(16).toUpperCase();
    }
    function literalEscape(s) {
        return s
            .replace(/\\/g, "\\\\")
            .replace(/"/g, "\\\"")
            .replace(/\0/g, "\\0")
            .replace(/\t/g, "\\t")
            .replace(/\n/g, "\\n")
            .replace(/\r/g, "\\r")
            .replace(/[\x00-\x0F]/g, function (ch) { return "\\x0" + hex(ch); })
            .replace(/[\x10-\x1F\x7F-\x9F]/g, function (ch) { return "\\x" + hex(ch); });
    }
    function classEscape(s) {
        return s
            .replace(/\\/g, "\\\\")
            .replace(/\]/g, "\\]")
            .replace(/\^/g, "\\^")
            .replace(/-/g, "\\-")
            .replace(/\0/g, "\\0")
            .replace(/\t/g, "\\t")
            .replace(/\n/g, "\\n")
            .replace(/\r/g, "\\r")
            .replace(/[\x00-\x0F]/g, function (ch) { return "\\x0" + hex(ch); })
            .replace(/[\x10-\x1F\x7F-\x9F]/g, function (ch) { return "\\x" + hex(ch); });
    }
    function describeExpectation(expectation) {
        return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
    }
    function describeExpected(expected) {
        var descriptions = expected.map(describeExpectation);
        var i, j;
        descriptions.sort();
        if (descriptions.length > 0) {
            for (i = 1, j = 1; i < descriptions.length; i++) {
                if (descriptions[i - 1] !== descriptions[i]) {
                    descriptions[j] = descriptions[i];
                    j++;
                }
            }
            descriptions.length = j;
        }
        switch (descriptions.length) {
            case 1:
                return descriptions[0];
            case 2:
                return descriptions[0] + " or " + descriptions[1];
            default:
                return descriptions.slice(0, -1).join(", ")
                    + ", or "
                    + descriptions[descriptions.length - 1];
        }
    }
    function describeFound(found) {
        return found ? "\"" + literalEscape(found) + "\"" : "end of input";
    }
    return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};
function peg$parse(input, options) {
    options = options !== undefined ? options : {};
    var peg$FAILED = {};
    var peg$source = options.grammarSource;
    var peg$startRuleFunctions = { jsonpath_query: peg$parsejsonpath_query };
    var peg$startRuleFunction = peg$parsejsonpath_query;
    var peg$c0 = "$";
    var peg$c1 = ".";
    var peg$c2 = "..";
    var peg$c3 = "[";
    var peg$c4 = ",";
    var peg$c5 = "]";
    var peg$c6 = "*";
    var peg$c7 = ":";
    var peg$c8 = "?";
    var peg$c9 = "\"";
    var peg$c10 = "'";
    var peg$c11 = "0";
    var peg$c12 = "-";
    var peg$c13 = "||";
    var peg$c14 = "\\";
    var peg$c15 = "u";
    var peg$c16 = "&&";
    var peg$c17 = "d";
    var peg$c18 = "(";
    var peg$c19 = ")";
    var peg$c20 = "!";
    var peg$c21 = "==";
    var peg$c22 = "!=";
    var peg$c23 = "<=";
    var peg$c24 = ">=";
    var peg$c25 = "-0";
    var peg$c26 = "true";
    var peg$c27 = "false";
    var peg$c28 = "null";
    var peg$c29 = "@";
    var peg$c30 = "e";
    var peg$r0 = /^[\t-\n\r ]/;
    var peg$r1 = /^[A-Z_a-z\x80-\uD7FF\uE000-\uFFFF]/;
    var peg$r2 = /^[\uD800-\uDBFF]/;
    var peg$r3 = /^[\uDC00-\uDFFF]/;
    var peg$r4 = /^[A-Za-z]/;
    var peg$r5 = /^[0-9]/;
    var peg$r6 = /^[1-9]/;
    var peg$r7 = /^[ -!#-&(-[\]-\uD7FF\uE000-\uFFFF]/;
    var peg$r8 = /^[\/\\bfnrt]/;
    var peg$r9 = /^[A-CE-F]/i;
    var peg$r10 = /^[0-7]/;
    var peg$r11 = /^[8-9]/;
    var peg$r12 = /^[A-B]/i;
    var peg$r13 = /^[C-F]/i;
    var peg$r14 = /^[A-F]/i;
    var peg$r15 = /^[<>]/;
    var peg$r16 = /^[0-9_a-z]/;
    var peg$r17 = /^[+\-]/;
    var peg$r18 = /^[a-z]/;
    var peg$e0 = peg$literalExpectation("$", false);
    var peg$e1 = peg$classExpectation([["\t", "\n"], "\r", " "], false, false);
    var peg$e2 = peg$literalExpectation(".", false);
    var peg$e3 = peg$literalExpectation("..", false);
    var peg$e4 = peg$literalExpectation("[", false);
    var peg$e5 = peg$literalExpectation(",", false);
    var peg$e6 = peg$literalExpectation("]", false);
    var peg$e7 = peg$literalExpectation("*", false);
    var peg$e8 = peg$classExpectation([["A", "Z"], "_", ["a", "z"], ["\x80", "\uD7FF"], ["\uE000", "\uFFFF"]], false, false);
    var peg$e9 = peg$classExpectation([["\uD800", "\uDBFF"]], false, false);
    var peg$e10 = peg$classExpectation([["\uDC00", "\uDFFF"]], false, false);
    var peg$e11 = peg$literalExpectation(":", false);
    var peg$e12 = peg$literalExpectation("?", false);
    var peg$e13 = peg$classExpectation([["A", "Z"], ["a", "z"]], false, false);
    var peg$e14 = peg$classExpectation([["0", "9"]], false, false);
    var peg$e15 = peg$literalExpectation("\"", false);
    var peg$e16 = peg$literalExpectation("'", false);
    var peg$e17 = peg$literalExpectation("0", false);
    var peg$e18 = peg$literalExpectation("-", false);
    var peg$e19 = peg$classExpectation([["1", "9"]], false, false);
    var peg$e20 = peg$literalExpectation("||", false);
    var peg$e21 = peg$classExpectation([[" ", "!"], ["#", "&"], ["(", "["], ["]", "\uD7FF"], ["\uE000", "\uFFFF"]], false, false);
    var peg$e22 = peg$literalExpectation("\\", false);
    var peg$e23 = peg$classExpectation(["/", "\\", "b", "f", "n", "r", "t"], false, false);
    var peg$e24 = peg$literalExpectation("u", false);
    var peg$e25 = peg$literalExpectation("&&", false);
    var peg$e26 = peg$classExpectation([["A", "C"], ["E", "F"]], false, true);
    var peg$e27 = peg$literalExpectation("D", true);
    var peg$e28 = peg$classExpectation([["0", "7"]], false, false);
    var peg$e29 = peg$classExpectation([["8", "9"]], false, false);
    var peg$e30 = peg$classExpectation([["A", "B"]], false, true);
    var peg$e31 = peg$classExpectation([["C", "F"]], false, true);
    var peg$e32 = peg$literalExpectation("(", false);
    var peg$e33 = peg$literalExpectation(")", false);
    var peg$e34 = peg$classExpectation([["A", "F"]], false, true);
    var peg$e35 = peg$literalExpectation("!", false);
    var peg$e36 = peg$literalExpectation("==", false);
    var peg$e37 = peg$literalExpectation("!=", false);
    var peg$e38 = peg$literalExpectation("<=", false);
    var peg$e39 = peg$literalExpectation(">=", false);
    var peg$e40 = peg$classExpectation(["<", ">"], false, false);
    var peg$e41 = peg$literalExpectation("-0", false);
    var peg$e42 = peg$literalExpectation("true", false);
    var peg$e43 = peg$literalExpectation("false", false);
    var peg$e44 = peg$literalExpectation("null", false);
    var peg$e45 = peg$literalExpectation("@", false);
    var peg$e46 = peg$classExpectation([["0", "9"], "_", ["a", "z"]], false, false);
    var peg$e47 = peg$literalExpectation("e", true);
    var peg$e48 = peg$classExpectation(["+", "-"], false, false);
    var peg$e49 = peg$classExpectation([["a", "z"]], false, false);
    var peg$f0 = function (segments) {
        return {
            type: 'JsonPathQuery',
            segments,
        };
    };
    var peg$f1 = function (value) { return value; };
    var peg$f2 = function (value) { return value; };
    var peg$f3 = function (node) { return { type: "ChildSegment", node }; };
    var peg$f4 = function (node) { return { type: "DescendantSegment", node }; };
    var peg$f5 = function (main, child) { return child; };
    var peg$f6 = function (main, rest) { return [main, ...rest]; };
    var peg$f7 = function (selectors) {
        return {
            type: "BracketedSelection",
            selectors,
        };
    };
    var peg$f8 = function () { return { type: "WildcardSelector" }; };
    var peg$f9 = function (value) { return { type: "MemberNameShorthand", value }; };
    var peg$f10 = function (value) { return { type: "NameSelector", value }; };
    var peg$f11 = function (start, end, value) { return value; };
    var peg$f12 = function (start, end, step) { return { start, end, step }; };
    var peg$f13 = function (values) {
        return {
            type: 'SliceSelector',
            start: values.start === "" ? null : Number.parseInt(values.start.trim(), 10),
            end: values.end === "" ? null : Number.parseInt(values.end.trim(), 10),
            step: values.step === "" || values.step === null ? null : Number.parseInt(values.step.trim(), 10),
        };
    };
    var peg$f14 = function (value) { return { type: 'IndexSelector', value: Number.parseInt(value, 10) }; };
    var peg$f15 = function (value) { return { type: 'FilterSelector', value }; };
    var peg$f16 = function (value) { return value; };
    var peg$f17 = function (value) { return value; };
    var peg$f18 = function (value) { return value.join(''); };
    var peg$f19 = function () { return "\""; };
    var peg$f20 = function (value) {
        switch (value) {
            case "b":
                return "\b";
            case "f":
                return "\f";
            case "n":
                return "\n";
            case "r":
                return "\r";
            case "t":
                return "\t";
            case "/":
                return "/";
            case "\\":
                return "\\";
            default:
                return value.slice(1);
        }
    };
    var peg$f21 = function () { return "'"; };
    var peg$f22 = function (value) {
        switch (value) {
            case "b":
                return "\b";
            case "f":
                return "\f";
            case "n":
                return "\n";
            case "r":
                return "\r";
            case "t":
                return "\t";
            case "/":
                return "/";
            case "\\":
                return "\\";
            default:
                return value.slice(1);
        }
    };
    var peg$f23 = function (left, value) { return value; };
    var peg$f24 = function (left, rest) {
        return rest.length === 0 ? left : {
            type: "LogicalOrExpr",
            left,
            right: rest.length === 1 ? rest[0] : rest.slice(1)
                .reduce((acc, curr) => ({
                type: "LogicalOrExpr",
                left: acc,
                right: curr,
            }), rest[0])
        };
    };
    var peg$f25 = function (main, value) { return value; };
    var peg$f26 = function (main, rest) { return [main, ...rest]; };
    var peg$f27 = function (conditions) {
        return conditions.length === 1 ? conditions[0] : {
            type: "LogicalAndExpr",
            left: conditions[0],
            right: conditions.length === 2 ? conditions[1] : conditions.slice(2)
                .reduce((acc, curr) => ({
                type: "LogicalOrExpr",
                left: acc,
                right: curr,
            }), conditions[1])
        };
    };
    var peg$f28 = function () { return String.fromCharCode(Number.parseInt(text(), 16)); };
    var peg$f29 = function (h, l) {
        return (String.fromCharCode(Number.parseInt(h, 16)) + String.fromCharCode(Number.parseInt(l, 16)));
    };
    var peg$f30 = function (value) { return value; };
    var peg$f31 = function (not, expression) {
        return not !== null ? {
            type: "LogicalNotExpr",
            expression
        } : expression;
    };
    var peg$f32 = function (left, op, right) {
        return {
            type: "ComparisonExpr",
            left,
            op,
            right,
        };
    };
    var peg$f33 = function (not, expression) {
        return not !== null ? {
            type: "LogicalNotExpr",
            expression: {
                type: "TestExpr",
                expression
            }
        } : {
            type: "TestExpr",
            expression
        };
    };
    var peg$f34 = function (value) { return { type: "FilterQuery", value }; };
    var peg$f35 = function (name, f, rest) { return rest; };
    var peg$f36 = function (name, f, r) { return [f, ...r]; };
    var peg$f37 = function (name, args) {
        return {
            type: "FunctionExpr",
            name,
            arguments: args,
        };
    };
    var peg$f38 = function (value) { return { type: 'Literal', value }; };
    var peg$f39 = function (segments) { return { type: "RelQuery", segments }; };
    var peg$f40 = function (value) { return Number(value); };
    var peg$f41 = function () { return true; };
    var peg$f42 = function () { return false; };
    var peg$f43 = function () { return null; };
    var peg$f44 = function (segments) { return { type: "RelSingularQuery", segments }; };
    var peg$f45 = function (segments) { return { type: "AbsSingularQuery", segments }; };
    var peg$f46 = function (segment) {
        return {
            type: 'SingularQuerySegment',
            node: segment
        };
    };
    var peg$f47 = function (segments) { return segments; };
    var peg$f48 = function (value) { return value; };
    var peg$f49 = function (value) { return value; };
    var peg$f50 = function (selector) { return { type: "IndexSelector", selector }; };
    var peg$currPos = options.peg$currPos | 0;
    var peg$savedPos = peg$currPos;
    var peg$posDetailsCache = [{ line: 1, column: 1 }];
    var peg$maxFailPos = peg$currPos;
    var peg$maxFailExpected = options.peg$maxFailExpected || [];
    var peg$silentFails = options.peg$silentFails | 0;
    var peg$result;
    if (options.startRule) {
        if (!(options.startRule in peg$startRuleFunctions)) {
            throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
        }
        peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }
    function text() {
        return input.substring(peg$savedPos, peg$currPos);
    }
    function offset() {
        return peg$savedPos;
    }
    function range() {
        return {
            source: peg$source,
            start: peg$savedPos,
            end: peg$currPos
        };
    }
    function location() {
        return peg$computeLocation(peg$savedPos, peg$currPos);
    }
    function expected(description, location) {
        location = location !== undefined
            ? location
            : peg$computeLocation(peg$savedPos, peg$currPos);
        throw peg$buildStructuredError([peg$otherExpectation(description)], input.substring(peg$savedPos, peg$currPos), location);
    }
    function error(message, location) {
        location = location !== undefined
            ? location
            : peg$computeLocation(peg$savedPos, peg$currPos);
        throw peg$buildSimpleError(message, location);
    }
    function peg$literalExpectation(text, ignoreCase) {
        return { type: "literal", text: text, ignoreCase: ignoreCase };
    }
    function peg$classExpectation(parts, inverted, ignoreCase) {
        return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
    }
    function peg$anyExpectation() {
        return { type: "any" };
    }
    function peg$endExpectation() {
        return { type: "end" };
    }
    function peg$otherExpectation(description) {
        return { type: "other", description: description };
    }
    function peg$computePosDetails(pos) {
        var details = peg$posDetailsCache[pos];
        var p;
        if (details) {
            return details;
        }
        else {
            if (pos >= peg$posDetailsCache.length) {
                p = peg$posDetailsCache.length - 1;
            }
            else {
                p = pos;
                while (!peg$posDetailsCache[--p]) { }
            }
            details = peg$posDetailsCache[p];
            details = {
                line: details.line,
                column: details.column
            };
            while (p < pos) {
                if (input.charCodeAt(p) === 10) {
                    details.line++;
                    details.column = 1;
                }
                else {
                    details.column++;
                }
                p++;
            }
            peg$posDetailsCache[pos] = details;
            return details;
        }
    }
    function peg$computeLocation(startPos, endPos, offset) {
        var startPosDetails = peg$computePosDetails(startPos);
        var endPosDetails = peg$computePosDetails(endPos);
        var res = {
            source: peg$source,
            start: {
                offset: startPos,
                line: startPosDetails.line,
                column: startPosDetails.column
            },
            end: {
                offset: endPos,
                line: endPosDetails.line,
                column: endPosDetails.column
            }
        };
        if (offset && peg$source && (typeof peg$source.offset === "function")) {
            res.start = peg$source.offset(res.start);
            res.end = peg$source.offset(res.end);
        }
        return res;
    }
    function peg$fail(expected) {
        if (peg$currPos < peg$maxFailPos) {
            return;
        }
        if (peg$currPos > peg$maxFailPos) {
            peg$maxFailPos = peg$currPos;
            peg$maxFailExpected = [];
        }
        peg$maxFailExpected.push(expected);
    }
    function peg$buildSimpleError(message, location) {
        return new peg$SyntaxError(message, null, null, location);
    }
    function peg$buildStructuredError(expected, found, location) {
        return new peg$SyntaxError(peg$SyntaxError.buildMessage(expected, found), expected, found, location);
    }
    function peg$parsejsonpath_query() {
        var s0, s1, s2;
        s0 = peg$currPos;
        s1 = peg$parseroot_identifier();
        if (s1 !== peg$FAILED) {
            s2 = peg$parsesegments();
            peg$savedPos = s0;
            s0 = peg$f0(s2);
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        return s0;
    }
    function peg$parseroot_identifier() {
        var s0;
        if (input.charCodeAt(peg$currPos) === 36) {
            s0 = peg$c0;
            peg$currPos++;
        }
        else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e0);
            }
        }
        return s0;
    }
    function peg$parsesegments() {
        var s0, s1, s2, s3;
        s0 = [];
        s1 = peg$currPos;
        s2 = peg$parseS();
        s3 = peg$parsesegment();
        if (s3 !== peg$FAILED) {
            peg$savedPos = s1;
            s1 = peg$f1(s3);
        }
        else {
            peg$currPos = s1;
            s1 = peg$FAILED;
        }
        while (s1 !== peg$FAILED) {
            s0.push(s1);
            s1 = peg$currPos;
            s2 = peg$parseS();
            s3 = peg$parsesegment();
            if (s3 !== peg$FAILED) {
                peg$savedPos = s1;
                s1 = peg$f1(s3);
            }
            else {
                peg$currPos = s1;
                s1 = peg$FAILED;
            }
        }
        return s0;
    }
    function peg$parseS() {
        var s0, s1;
        s0 = [];
        s1 = peg$parseB();
        while (s1 !== peg$FAILED) {
            s0.push(s1);
            s1 = peg$parseB();
        }
        return s0;
    }
    function peg$parsesegment() {
        var s0;
        s0 = peg$parsechild_segment();
        if (s0 === peg$FAILED) {
            s0 = peg$parsedescendant_segment();
        }
        return s0;
    }
    function peg$parseB() {
        var s0;
        s0 = input.charAt(peg$currPos);
        if (peg$r0.test(s0)) {
            peg$currPos++;
        }
        else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e1);
            }
        }
        return s0;
    }
    function peg$parsechild_segment() {
        var s0, s1, s2, s3;
        s0 = peg$currPos;
        s1 = peg$parsebracketed_selection();
        if (s1 === peg$FAILED) {
            s1 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 46) {
                s2 = peg$c1;
                peg$currPos++;
            }
            else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e2);
                }
            }
            if (s2 !== peg$FAILED) {
                s3 = peg$parsewildcard_selector();
                if (s3 === peg$FAILED) {
                    s3 = peg$parsemember_name_shorthand();
                }
                if (s3 !== peg$FAILED) {
                    peg$savedPos = s1;
                    s1 = peg$f2(s3);
                }
                else {
                    peg$currPos = s1;
                    s1 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s1;
                s1 = peg$FAILED;
            }
        }
        if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f3(s1);
        }
        s0 = s1;
        return s0;
    }
    function peg$parsedescendant_segment() {
        var s0, s1, s2;
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c2) {
            s1 = peg$c2;
            peg$currPos += 2;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e3);
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$parsebracketed_selection();
            if (s2 === peg$FAILED) {
                s2 = peg$parsewildcard_selector();
                if (s2 === peg$FAILED) {
                    s2 = peg$parsemember_name_shorthand();
                }
            }
            if (s2 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f4(s2);
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        return s0;
    }
    function peg$parsebracketed_selection() {
        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 91) {
            s1 = peg$c3;
            peg$currPos++;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e4);
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$currPos;
            s3 = peg$parseS();
            s4 = peg$parseselector();
            if (s4 !== peg$FAILED) {
                s5 = [];
                s6 = peg$currPos;
                s7 = peg$parseS();
                if (input.charCodeAt(peg$currPos) === 44) {
                    s8 = peg$c4;
                    peg$currPos++;
                }
                else {
                    s8 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$e5);
                    }
                }
                if (s8 !== peg$FAILED) {
                    s9 = peg$parseS();
                    s10 = peg$parseselector();
                    if (s10 !== peg$FAILED) {
                        peg$savedPos = s6;
                        s6 = peg$f5(s4, s10);
                    }
                    else {
                        peg$currPos = s6;
                        s6 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                }
                while (s6 !== peg$FAILED) {
                    s5.push(s6);
                    s6 = peg$currPos;
                    s7 = peg$parseS();
                    if (input.charCodeAt(peg$currPos) === 44) {
                        s8 = peg$c4;
                        peg$currPos++;
                    }
                    else {
                        s8 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$e5);
                        }
                    }
                    if (s8 !== peg$FAILED) {
                        s9 = peg$parseS();
                        s10 = peg$parseselector();
                        if (s10 !== peg$FAILED) {
                            peg$savedPos = s6;
                            s6 = peg$f5(s4, s10);
                        }
                        else {
                            peg$currPos = s6;
                            s6 = peg$FAILED;
                        }
                    }
                    else {
                        peg$currPos = s6;
                        s6 = peg$FAILED;
                    }
                }
                peg$savedPos = s2;
                s2 = peg$f6(s4, s5);
            }
            else {
                peg$currPos = s2;
                s2 = peg$FAILED;
            }
            if (s2 !== peg$FAILED) {
                s3 = peg$parseS();
                if (input.charCodeAt(peg$currPos) === 93) {
                    s4 = peg$c5;
                    peg$currPos++;
                }
                else {
                    s4 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$e6);
                    }
                }
                if (s4 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s0 = peg$f7(s2);
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        return s0;
    }
    function peg$parsewildcard_selector() {
        var s0, s1;
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 42) {
            s1 = peg$c6;
            peg$currPos++;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e7);
            }
        }
        if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f8();
        }
        s0 = s1;
        return s0;
    }
    function peg$parsemember_name_shorthand() {
        var s0, s1, s2, s3, s4, s5;
        s0 = peg$currPos;
        s1 = peg$currPos;
        s2 = peg$currPos;
        s3 = peg$parsename_first();
        if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parsename_char();
            while (s5 !== peg$FAILED) {
                s4.push(s5);
                s5 = peg$parsename_char();
            }
            s3 = [s3, s4];
            s2 = s3;
        }
        else {
            peg$currPos = s2;
            s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
            s1 = input.substring(s1, peg$currPos);
        }
        else {
            s1 = s2;
        }
        if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f9(s1);
        }
        s0 = s1;
        return s0;
    }
    function peg$parseselector() {
        var s0;
        s0 = peg$parsename_selector();
        if (s0 === peg$FAILED) {
            s0 = peg$parsewildcard_selector();
            if (s0 === peg$FAILED) {
                s0 = peg$parseslice_selector();
                if (s0 === peg$FAILED) {
                    s0 = peg$parseindex_selector();
                    if (s0 === peg$FAILED) {
                        s0 = peg$parsefilter_selector();
                    }
                }
            }
        }
        return s0;
    }
    function peg$parsename_first() {
        var s0, s1, s2;
        s0 = input.charAt(peg$currPos);
        if (peg$r1.test(s0)) {
            peg$currPos++;
        }
        else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e8);
            }
        }
        if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = input.charAt(peg$currPos);
            if (peg$r2.test(s1)) {
                peg$currPos++;
            }
            else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e9);
                }
            }
            if (s1 !== peg$FAILED) {
                s2 = input.charAt(peg$currPos);
                if (peg$r3.test(s2)) {
                    peg$currPos++;
                }
                else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$e10);
                    }
                }
                if (s2 !== peg$FAILED) {
                    s1 = [s1, s2];
                    s0 = s1;
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        return s0;
    }
    function peg$parsename_char() {
        var s0;
        s0 = peg$parsename_first();
        if (s0 === peg$FAILED) {
            s0 = peg$parseDIGIT();
        }
        return s0;
    }
    function peg$parsename_selector() {
        var s0, s1;
        s0 = peg$currPos;
        s1 = peg$parsestring_literal();
        if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f10(s1);
        }
        s0 = s1;
        return s0;
    }
    function peg$parseslice_selector() {
        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;
        s0 = peg$currPos;
        s1 = peg$currPos;
        s2 = peg$currPos;
        s3 = peg$currPos;
        s4 = peg$parseint();
        if (s4 !== peg$FAILED) {
            s5 = peg$parseS();
            s4 = [s4, s5];
            s3 = s4;
        }
        else {
            peg$currPos = s3;
            s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
            s3 = null;
        }
        s2 = input.substring(s2, peg$currPos);
        if (input.charCodeAt(peg$currPos) === 58) {
            s3 = peg$c7;
            peg$currPos++;
        }
        else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e11);
            }
        }
        if (s3 !== peg$FAILED) {
            s4 = peg$parseS();
            s5 = peg$currPos;
            s6 = peg$currPos;
            s7 = peg$parseint();
            if (s7 !== peg$FAILED) {
                s8 = peg$parseS();
                s7 = [s7, s8];
                s6 = s7;
            }
            else {
                peg$currPos = s6;
                s6 = peg$FAILED;
            }
            if (s6 === peg$FAILED) {
                s6 = null;
            }
            s5 = input.substring(s5, peg$currPos);
            s6 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 58) {
                s7 = peg$c7;
                peg$currPos++;
            }
            else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e11);
                }
            }
            if (s7 !== peg$FAILED) {
                s8 = peg$currPos;
                s9 = peg$currPos;
                s10 = peg$parseS();
                s11 = peg$parseint();
                if (s11 === peg$FAILED) {
                    s11 = null;
                }
                s10 = [s10, s11];
                s9 = s10;
                s8 = input.substring(s8, peg$currPos);
                peg$savedPos = s6;
                s6 = peg$f11(s2, s5, s8);
            }
            else {
                peg$currPos = s6;
                s6 = peg$FAILED;
            }
            if (s6 === peg$FAILED) {
                s6 = null;
            }
            peg$savedPos = s1;
            s1 = peg$f12(s2, s5, s6);
        }
        else {
            peg$currPos = s1;
            s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f13(s1);
        }
        s0 = s1;
        return s0;
    }
    function peg$parseindex_selector() {
        var s0, s1, s2;
        s0 = peg$currPos;
        s1 = peg$currPos;
        s2 = peg$parseint();
        if (s2 !== peg$FAILED) {
            s1 = input.substring(s1, peg$currPos);
        }
        else {
            s1 = s2;
        }
        if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f14(s1);
        }
        s0 = s1;
        return s0;
    }
    function peg$parsefilter_selector() {
        var s0, s1, s2, s3;
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 63) {
            s1 = peg$c8;
            peg$currPos++;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e12);
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$parseS();
            s3 = peg$parselogical_or_expr();
            if (s3 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f15(s3);
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        return s0;
    }
    function peg$parseALPHA() {
        var s0;
        s0 = input.charAt(peg$currPos);
        if (peg$r4.test(s0)) {
            peg$currPos++;
        }
        else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e13);
            }
        }
        return s0;
    }
    function peg$parseDIGIT() {
        var s0;
        s0 = input.charAt(peg$currPos);
        if (peg$r5.test(s0)) {
            peg$currPos++;
        }
        else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e14);
            }
        }
        return s0;
    }
    function peg$parsestring_literal() {
        var s0, s1, s2, s3, s4;
        s0 = peg$currPos;
        s1 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 34) {
            s2 = peg$c9;
            peg$currPos++;
        }
        else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e15);
            }
        }
        if (s2 !== peg$FAILED) {
            s3 = [];
            s4 = peg$parsedouble_quoted();
            while (s4 !== peg$FAILED) {
                s3.push(s4);
                s4 = peg$parsedouble_quoted();
            }
            if (input.charCodeAt(peg$currPos) === 34) {
                s4 = peg$c9;
                peg$currPos++;
            }
            else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e15);
                }
            }
            if (s4 !== peg$FAILED) {
                peg$savedPos = s1;
                s1 = peg$f16(s3);
            }
            else {
                peg$currPos = s1;
                s1 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s1;
            s1 = peg$FAILED;
        }
        if (s1 === peg$FAILED) {
            s1 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 39) {
                s2 = peg$c10;
                peg$currPos++;
            }
            else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e16);
                }
            }
            if (s2 !== peg$FAILED) {
                s3 = [];
                s4 = peg$parsesingle_quoted();
                while (s4 !== peg$FAILED) {
                    s3.push(s4);
                    s4 = peg$parsesingle_quoted();
                }
                if (input.charCodeAt(peg$currPos) === 39) {
                    s4 = peg$c10;
                    peg$currPos++;
                }
                else {
                    s4 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$e16);
                    }
                }
                if (s4 !== peg$FAILED) {
                    peg$savedPos = s1;
                    s1 = peg$f17(s3);
                }
                else {
                    peg$currPos = s1;
                    s1 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s1;
                s1 = peg$FAILED;
            }
        }
        if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f18(s1);
        }
        s0 = s1;
        return s0;
    }
    function peg$parseint() {
        var s0, s1, s2, s3, s4;
        if (input.charCodeAt(peg$currPos) === 48) {
            s0 = peg$c11;
            peg$currPos++;
        }
        else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e17);
            }
        }
        if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 45) {
                s1 = peg$c12;
                peg$currPos++;
            }
            else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e18);
                }
            }
            if (s1 === peg$FAILED) {
                s1 = null;
            }
            s2 = peg$parseDIGIT1();
            if (s2 !== peg$FAILED) {
                s3 = [];
                s4 = peg$parseDIGIT();
                while (s4 !== peg$FAILED) {
                    s3.push(s4);
                    s4 = peg$parseDIGIT();
                }
                s1 = [s1, s2, s3];
                s0 = s1;
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        return s0;
    }
    function peg$parsedouble_quoted() {
        var s0, s1, s2;
        s0 = peg$currPos;
        s1 = peg$parseunescaped();
        if (s1 !== peg$FAILED) {
            s0 = input.substring(s0, peg$currPos);
        }
        else {
            s0 = s1;
        }
        if (s0 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 39) {
                s0 = peg$c10;
                peg$currPos++;
            }
            else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e16);
                }
            }
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseESC();
                if (s1 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 34) {
                        s2 = peg$c9;
                        peg$currPos++;
                    }
                    else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$e15);
                        }
                    }
                    if (s2 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s0 = peg$f19();
                    }
                    else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = peg$parseESC();
                    if (s1 !== peg$FAILED) {
                        s2 = peg$parseescapable();
                        if (s2 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s0 = peg$f20(s2);
                        }
                        else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    }
                    else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }
            }
        }
        return s0;
    }
    function peg$parsesingle_quoted() {
        var s0, s1, s2;
        s0 = peg$currPos;
        s1 = peg$parseunescaped();
        if (s1 !== peg$FAILED) {
            s0 = input.substring(s0, peg$currPos);
        }
        else {
            s0 = s1;
        }
        if (s0 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 34) {
                s0 = peg$c9;
                peg$currPos++;
            }
            else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e15);
                }
            }
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseESC();
                if (s1 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 39) {
                        s2 = peg$c10;
                        peg$currPos++;
                    }
                    else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$e16);
                        }
                    }
                    if (s2 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s0 = peg$f21();
                    }
                    else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = peg$parseESC();
                    if (s1 !== peg$FAILED) {
                        s2 = peg$parseescapable();
                        if (s2 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s0 = peg$f22(s2);
                        }
                        else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    }
                    else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }
            }
        }
        return s0;
    }
    function peg$parseDIGIT1() {
        var s0;
        s0 = input.charAt(peg$currPos);
        if (peg$r6.test(s0)) {
            peg$currPos++;
        }
        else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e19);
            }
        }
        return s0;
    }
    function peg$parselogical_or_expr() {
        var s0, s1, s2, s3, s4, s5, s6, s7;
        s0 = peg$currPos;
        s1 = peg$parselogical_and_expr();
        if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$currPos;
            s4 = peg$parseS();
            if (input.substr(peg$currPos, 2) === peg$c13) {
                s5 = peg$c13;
                peg$currPos += 2;
            }
            else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e20);
                }
            }
            if (s5 !== peg$FAILED) {
                s6 = peg$parseS();
                s7 = peg$parselogical_and_expr();
                if (s7 !== peg$FAILED) {
                    peg$savedPos = s3;
                    s3 = peg$f23(s1, s7);
                }
                else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s3;
                s3 = peg$FAILED;
            }
            while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$currPos;
                s4 = peg$parseS();
                if (input.substr(peg$currPos, 2) === peg$c13) {
                    s5 = peg$c13;
                    peg$currPos += 2;
                }
                else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$e20);
                    }
                }
                if (s5 !== peg$FAILED) {
                    s6 = peg$parseS();
                    s7 = peg$parselogical_and_expr();
                    if (s7 !== peg$FAILED) {
                        peg$savedPos = s3;
                        s3 = peg$f23(s1, s7);
                    }
                    else {
                        peg$currPos = s3;
                        s3 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                }
            }
            peg$savedPos = s0;
            s0 = peg$f24(s1, s2);
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        return s0;
    }
    function peg$parseunescaped() {
        var s0, s1, s2;
        s0 = input.charAt(peg$currPos);
        if (peg$r7.test(s0)) {
            peg$currPos++;
        }
        else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e21);
            }
        }
        if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = input.charAt(peg$currPos);
            if (peg$r2.test(s1)) {
                peg$currPos++;
            }
            else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e9);
                }
            }
            if (s1 !== peg$FAILED) {
                s2 = input.charAt(peg$currPos);
                if (peg$r3.test(s2)) {
                    peg$currPos++;
                }
                else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$e10);
                    }
                }
                if (s2 !== peg$FAILED) {
                    s1 = [s1, s2];
                    s0 = s1;
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        return s0;
    }
    function peg$parseESC() {
        var s0;
        if (input.charCodeAt(peg$currPos) === 92) {
            s0 = peg$c14;
            peg$currPos++;
        }
        else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e22);
            }
        }
        return s0;
    }
    function peg$parseescapable() {
        var s0, s1, s2;
        s0 = input.charAt(peg$currPos);
        if (peg$r8.test(s0)) {
            peg$currPos++;
        }
        else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e23);
            }
        }
        if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 117) {
                s1 = peg$c15;
                peg$currPos++;
            }
            else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e24);
                }
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$parsehexchar();
                if (s2 !== peg$FAILED) {
                    s1 = [s1, s2];
                    s0 = s1;
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        return s0;
    }
    function peg$parselogical_and_expr() {
        var s0, s1, s2, s3, s4, s5, s6, s7, s8;
        s0 = peg$currPos;
        s1 = peg$currPos;
        s2 = peg$parsebasic_expr();
        if (s2 !== peg$FAILED) {
            s3 = [];
            s4 = peg$currPos;
            s5 = peg$parseS();
            if (input.substr(peg$currPos, 2) === peg$c16) {
                s6 = peg$c16;
                peg$currPos += 2;
            }
            else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e25);
                }
            }
            if (s6 !== peg$FAILED) {
                s7 = peg$parseS();
                s8 = peg$parsebasic_expr();
                if (s8 !== peg$FAILED) {
                    peg$savedPos = s4;
                    s4 = peg$f25(s2, s8);
                }
                else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s4;
                s4 = peg$FAILED;
            }
            while (s4 !== peg$FAILED) {
                s3.push(s4);
                s4 = peg$currPos;
                s5 = peg$parseS();
                if (input.substr(peg$currPos, 2) === peg$c16) {
                    s6 = peg$c16;
                    peg$currPos += 2;
                }
                else {
                    s6 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$e25);
                    }
                }
                if (s6 !== peg$FAILED) {
                    s7 = peg$parseS();
                    s8 = peg$parsebasic_expr();
                    if (s8 !== peg$FAILED) {
                        peg$savedPos = s4;
                        s4 = peg$f25(s2, s8);
                    }
                    else {
                        peg$currPos = s4;
                        s4 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                }
            }
            peg$savedPos = s1;
            s1 = peg$f26(s2, s3);
        }
        else {
            peg$currPos = s1;
            s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f27(s1);
        }
        s0 = s1;
        return s0;
    }
    function peg$parsehexchar() {
        var s0, s1, s2, s3, s4, s5, s6;
        s0 = peg$currPos;
        s1 = peg$currPos;
        s2 = peg$parsenon_surrogate();
        if (s2 !== peg$FAILED) {
            peg$savedPos = s1;
            s2 = peg$f28();
        }
        s1 = s2;
        if (s1 === peg$FAILED) {
            s1 = peg$currPos;
            s2 = peg$currPos;
            s3 = peg$parsehigh_surrogate();
            if (s3 !== peg$FAILED) {
                s2 = input.substring(s2, peg$currPos);
            }
            else {
                s2 = s3;
            }
            if (s2 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 92) {
                    s3 = peg$c14;
                    peg$currPos++;
                }
                else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$e22);
                    }
                }
                if (s3 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 117) {
                        s4 = peg$c15;
                        peg$currPos++;
                    }
                    else {
                        s4 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$e24);
                        }
                    }
                    if (s4 !== peg$FAILED) {
                        s5 = peg$currPos;
                        s6 = peg$parselow_surrogate();
                        if (s6 !== peg$FAILED) {
                            s5 = input.substring(s5, peg$currPos);
                        }
                        else {
                            s5 = s6;
                        }
                        if (s5 !== peg$FAILED) {
                            peg$savedPos = s1;
                            s1 = peg$f29(s2, s5);
                        }
                        else {
                            peg$currPos = s1;
                            s1 = peg$FAILED;
                        }
                    }
                    else {
                        peg$currPos = s1;
                        s1 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s1;
                    s1 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s1;
                s1 = peg$FAILED;
            }
        }
        if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f30(s1);
        }
        s0 = s1;
        return s0;
    }
    function peg$parsebasic_expr() {
        var s0;
        s0 = peg$parseparen_expr();
        if (s0 === peg$FAILED) {
            s0 = peg$parsecomparison_expr();
            if (s0 === peg$FAILED) {
                s0 = peg$parsetest_expr();
            }
        }
        return s0;
    }
    function peg$parsenon_surrogate() {
        var s0, s1, s2, s3, s4, s5;
        s0 = peg$currPos;
        s1 = peg$parseDIGIT();
        if (s1 === peg$FAILED) {
            s1 = input.charAt(peg$currPos);
            if (peg$r9.test(s1)) {
                peg$currPos++;
            }
            else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e26);
                }
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$currPos;
            s3 = [];
            s4 = peg$parseHEXDIG();
            while (s4 !== peg$FAILED) {
                s3.push(s4);
                if (s3.length >= 3) {
                    s4 = peg$FAILED;
                }
                else {
                    s4 = peg$parseHEXDIG();
                }
            }
            if (s3.length < 3) {
                peg$currPos = s2;
                s2 = peg$FAILED;
            }
            else {
                s2 = s3;
            }
            if (s2 !== peg$FAILED) {
                s1 = [s1, s2];
                s0 = s1;
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = input.charAt(peg$currPos);
            if (s1.toLowerCase() === peg$c17) {
                peg$currPos++;
            }
            else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e27);
                }
            }
            if (s1 !== peg$FAILED) {
                s2 = input.charAt(peg$currPos);
                if (peg$r10.test(s2)) {
                    peg$currPos++;
                }
                else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$e28);
                    }
                }
                if (s2 !== peg$FAILED) {
                    s3 = peg$currPos;
                    s4 = [];
                    s5 = peg$parseHEXDIG();
                    while (s5 !== peg$FAILED) {
                        s4.push(s5);
                        if (s4.length >= 2) {
                            s5 = peg$FAILED;
                        }
                        else {
                            s5 = peg$parseHEXDIG();
                        }
                    }
                    if (s4.length < 2) {
                        peg$currPos = s3;
                        s3 = peg$FAILED;
                    }
                    else {
                        s3 = s4;
                    }
                    if (s3 !== peg$FAILED) {
                        s1 = [s1, s2, s3];
                        s0 = s1;
                    }
                    else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        return s0;
    }
    function peg$parsehigh_surrogate() {
        var s0, s1, s2, s3, s4, s5;
        s0 = peg$currPos;
        s1 = input.charAt(peg$currPos);
        if (s1.toLowerCase() === peg$c17) {
            peg$currPos++;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e27);
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = input.charAt(peg$currPos);
            if (peg$r11.test(s2)) {
                peg$currPos++;
            }
            else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e29);
                }
            }
            if (s2 === peg$FAILED) {
                s2 = input.charAt(peg$currPos);
                if (peg$r12.test(s2)) {
                    peg$currPos++;
                }
                else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$e30);
                    }
                }
            }
            if (s2 !== peg$FAILED) {
                s3 = peg$currPos;
                s4 = [];
                s5 = peg$parseHEXDIG();
                while (s5 !== peg$FAILED) {
                    s4.push(s5);
                    if (s4.length >= 2) {
                        s5 = peg$FAILED;
                    }
                    else {
                        s5 = peg$parseHEXDIG();
                    }
                }
                if (s4.length < 2) {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                }
                else {
                    s3 = s4;
                }
                if (s3 !== peg$FAILED) {
                    s1 = [s1, s2, s3];
                    s0 = s1;
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        return s0;
    }
    function peg$parselow_surrogate() {
        var s0, s1, s2, s3, s4, s5;
        s0 = peg$currPos;
        s1 = input.charAt(peg$currPos);
        if (s1.toLowerCase() === peg$c17) {
            peg$currPos++;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e27);
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = input.charAt(peg$currPos);
            if (peg$r13.test(s2)) {
                peg$currPos++;
            }
            else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e31);
                }
            }
            if (s2 !== peg$FAILED) {
                s3 = peg$currPos;
                s4 = [];
                s5 = peg$parseHEXDIG();
                while (s5 !== peg$FAILED) {
                    s4.push(s5);
                    if (s4.length >= 2) {
                        s5 = peg$FAILED;
                    }
                    else {
                        s5 = peg$parseHEXDIG();
                    }
                }
                if (s4.length < 2) {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                }
                else {
                    s3 = s4;
                }
                if (s3 !== peg$FAILED) {
                    s1 = [s1, s2, s3];
                    s0 = s1;
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        return s0;
    }
    function peg$parseparen_expr() {
        var s0, s1, s2, s3, s4, s5, s6;
        s0 = peg$currPos;
        s1 = peg$currPos;
        s2 = peg$parselogical_not_op();
        if (s2 !== peg$FAILED) {
            s3 = peg$parseS();
            s2 = [s2, s3];
            s1 = s2;
        }
        else {
            peg$currPos = s1;
            s1 = peg$FAILED;
        }
        if (s1 === peg$FAILED) {
            s1 = null;
        }
        if (input.charCodeAt(peg$currPos) === 40) {
            s2 = peg$c18;
            peg$currPos++;
        }
        else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e32);
            }
        }
        if (s2 !== peg$FAILED) {
            s3 = peg$parseS();
            s4 = peg$parselogical_or_expr();
            if (s4 !== peg$FAILED) {
                s5 = peg$parseS();
                if (input.charCodeAt(peg$currPos) === 41) {
                    s6 = peg$c19;
                    peg$currPos++;
                }
                else {
                    s6 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$e33);
                    }
                }
                if (s6 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s0 = peg$f31(s1, s4);
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        return s0;
    }
    function peg$parsecomparison_expr() {
        var s0, s1, s2, s3, s4, s5;
        s0 = peg$currPos;
        s1 = peg$parsecomparable();
        if (s1 !== peg$FAILED) {
            s2 = peg$parseS();
            s3 = peg$parsecomparison_op();
            if (s3 !== peg$FAILED) {
                s4 = peg$parseS();
                s5 = peg$parsecomparable();
                if (s5 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s0 = peg$f32(s1, s3, s5);
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        return s0;
    }
    function peg$parsetest_expr() {
        var s0, s1, s2, s3;
        s0 = peg$currPos;
        s1 = peg$currPos;
        s2 = peg$parselogical_not_op();
        if (s2 !== peg$FAILED) {
            s3 = peg$parseS();
            s2 = [s2, s3];
            s1 = s2;
        }
        else {
            peg$currPos = s1;
            s1 = peg$FAILED;
        }
        if (s1 === peg$FAILED) {
            s1 = null;
        }
        s2 = peg$parsefilter_query();
        if (s2 === peg$FAILED) {
            s2 = peg$parsefunction_expr();
        }
        if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f33(s1, s2);
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        return s0;
    }
    function peg$parseHEXDIG() {
        var s0;
        s0 = peg$parseDIGIT();
        if (s0 === peg$FAILED) {
            s0 = input.charAt(peg$currPos);
            if (peg$r14.test(s0)) {
                peg$currPos++;
            }
            else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e34);
                }
            }
        }
        return s0;
    }
    function peg$parselogical_not_op() {
        var s0;
        if (input.charCodeAt(peg$currPos) === 33) {
            s0 = peg$c20;
            peg$currPos++;
        }
        else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e35);
            }
        }
        return s0;
    }
    function peg$parsecomparable() {
        var s0;
        s0 = peg$parseliteral();
        if (s0 === peg$FAILED) {
            s0 = peg$parsesingular_query();
            if (s0 === peg$FAILED) {
                s0 = peg$parsefunction_expr();
            }
        }
        return s0;
    }
    function peg$parsecomparison_op() {
        var s0;
        if (input.substr(peg$currPos, 2) === peg$c21) {
            s0 = peg$c21;
            peg$currPos += 2;
        }
        else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e36);
            }
        }
        if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c22) {
                s0 = peg$c22;
                peg$currPos += 2;
            }
            else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e37);
                }
            }
            if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c23) {
                    s0 = peg$c23;
                    peg$currPos += 2;
                }
                else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$e38);
                    }
                }
                if (s0 === peg$FAILED) {
                    if (input.substr(peg$currPos, 2) === peg$c24) {
                        s0 = peg$c24;
                        peg$currPos += 2;
                    }
                    else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$e39);
                        }
                    }
                    if (s0 === peg$FAILED) {
                        s0 = input.charAt(peg$currPos);
                        if (peg$r15.test(s0)) {
                            peg$currPos++;
                        }
                        else {
                            s0 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$e40);
                            }
                        }
                    }
                }
            }
        }
        return s0;
    }
    function peg$parsefilter_query() {
        var s0, s1;
        s0 = peg$currPos;
        s1 = peg$parserel_query();
        if (s1 === peg$FAILED) {
            s1 = peg$parsejsonpath_query();
        }
        if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f34(s1);
        }
        s0 = s1;
        return s0;
    }
    function peg$parsefunction_expr() {
        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;
        s0 = peg$currPos;
        s1 = peg$parsefunction_name();
        if (s1 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 40) {
                s2 = peg$c18;
                peg$currPos++;
            }
            else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e32);
                }
            }
            if (s2 !== peg$FAILED) {
                s3 = peg$parseS();
                s4 = peg$currPos;
                s5 = peg$parsefunction_argument();
                if (s5 !== peg$FAILED) {
                    s6 = [];
                    s7 = peg$currPos;
                    s8 = peg$parseS();
                    if (input.charCodeAt(peg$currPos) === 44) {
                        s9 = peg$c4;
                        peg$currPos++;
                    }
                    else {
                        s9 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$e5);
                        }
                    }
                    if (s9 !== peg$FAILED) {
                        s10 = peg$parseS();
                        s11 = peg$parsefunction_argument();
                        if (s11 !== peg$FAILED) {
                            peg$savedPos = s7;
                            s7 = peg$f35(s1, s5, s11);
                        }
                        else {
                            peg$currPos = s7;
                            s7 = peg$FAILED;
                        }
                    }
                    else {
                        peg$currPos = s7;
                        s7 = peg$FAILED;
                    }
                    while (s7 !== peg$FAILED) {
                        s6.push(s7);
                        s7 = peg$currPos;
                        s8 = peg$parseS();
                        if (input.charCodeAt(peg$currPos) === 44) {
                            s9 = peg$c4;
                            peg$currPos++;
                        }
                        else {
                            s9 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$e5);
                            }
                        }
                        if (s9 !== peg$FAILED) {
                            s10 = peg$parseS();
                            s11 = peg$parsefunction_argument();
                            if (s11 !== peg$FAILED) {
                                peg$savedPos = s7;
                                s7 = peg$f35(s1, s5, s11);
                            }
                            else {
                                peg$currPos = s7;
                                s7 = peg$FAILED;
                            }
                        }
                        else {
                            peg$currPos = s7;
                            s7 = peg$FAILED;
                        }
                    }
                    peg$savedPos = s4;
                    s4 = peg$f36(s1, s5, s6);
                }
                else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                }
                if (s4 === peg$FAILED) {
                    s4 = null;
                }
                s5 = peg$parseS();
                if (input.charCodeAt(peg$currPos) === 41) {
                    s6 = peg$c19;
                    peg$currPos++;
                }
                else {
                    s6 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$e33);
                    }
                }
                if (s6 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s0 = peg$f37(s1, s4);
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        return s0;
    }
    function peg$parseliteral() {
        var s0, s1;
        s0 = peg$currPos;
        s1 = peg$parsenumber();
        if (s1 === peg$FAILED) {
            s1 = peg$parsestring_literal();
            if (s1 === peg$FAILED) {
                s1 = peg$parsetrue();
                if (s1 === peg$FAILED) {
                    s1 = peg$parsefalse();
                    if (s1 === peg$FAILED) {
                        s1 = peg$parsenull();
                    }
                }
            }
        }
        if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f38(s1);
        }
        s0 = s1;
        return s0;
    }
    function peg$parsesingular_query() {
        var s0;
        s0 = peg$parserel_singular_query();
        if (s0 === peg$FAILED) {
            s0 = peg$parseabs_singular_query();
        }
        return s0;
    }
    function peg$parserel_query() {
        var s0, s1, s2;
        s0 = peg$currPos;
        s1 = peg$parsecurrent_node_identifier();
        if (s1 !== peg$FAILED) {
            s2 = peg$parsesegments();
            if (s2 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f39(s2);
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        return s0;
    }
    function peg$parsefunction_name() {
        var s0, s1, s2, s3, s4;
        s0 = peg$currPos;
        s1 = peg$currPos;
        s2 = peg$parseLCALPHA();
        if (s2 !== peg$FAILED) {
            s3 = [];
            s4 = peg$parsefunction_name_char();
            while (s4 !== peg$FAILED) {
                s3.push(s4);
                s4 = peg$parsefunction_name_char();
            }
            s2 = [s2, s3];
            s1 = s2;
        }
        else {
            peg$currPos = s1;
            s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
            s0 = input.substring(s0, peg$currPos);
        }
        else {
            s0 = s1;
        }
        return s0;
    }
    function peg$parsefunction_argument() {
        var s0;
        s0 = peg$parseliteral();
        if (s0 === peg$FAILED) {
            s0 = peg$parsefilter_query();
            if (s0 === peg$FAILED) {
                s0 = peg$parsefunction_expr();
                if (s0 === peg$FAILED) {
                    s0 = peg$parselogical_or_expr();
                }
            }
        }
        return s0;
    }
    function peg$parsenumber() {
        var s0, s1, s2, s3, s4, s5;
        s0 = peg$currPos;
        s1 = peg$currPos;
        s2 = peg$currPos;
        s3 = peg$parseint();
        if (s3 === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c25) {
                s3 = peg$c25;
                peg$currPos += 2;
            }
            else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e41);
                }
            }
        }
        if (s3 !== peg$FAILED) {
            s4 = peg$parsefrac();
            if (s4 === peg$FAILED) {
                s4 = null;
            }
            s5 = peg$parseexp();
            if (s5 === peg$FAILED) {
                s5 = null;
            }
            s3 = [s3, s4, s5];
            s2 = s3;
        }
        else {
            peg$currPos = s2;
            s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
            s1 = input.substring(s1, peg$currPos);
        }
        else {
            s1 = s2;
        }
        if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f40(s1);
        }
        s0 = s1;
        return s0;
    }
    function peg$parsetrue() {
        var s0, s1;
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 4) === peg$c26) {
            s1 = peg$c26;
            peg$currPos += 4;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e42);
            }
        }
        if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f41();
        }
        s0 = s1;
        return s0;
    }
    function peg$parsefalse() {
        var s0, s1;
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 5) === peg$c27) {
            s1 = peg$c27;
            peg$currPos += 5;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e43);
            }
        }
        if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f42();
        }
        s0 = s1;
        return s0;
    }
    function peg$parsenull() {
        var s0, s1;
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 4) === peg$c28) {
            s1 = peg$c28;
            peg$currPos += 4;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e44);
            }
        }
        if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f43();
        }
        s0 = s1;
        return s0;
    }
    function peg$parserel_singular_query() {
        var s0, s1, s2;
        s0 = peg$currPos;
        s1 = peg$parsecurrent_node_identifier();
        if (s1 !== peg$FAILED) {
            s2 = peg$parsesingular_query_segments();
            peg$savedPos = s0;
            s0 = peg$f44(s2);
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        return s0;
    }
    function peg$parseabs_singular_query() {
        var s0, s1, s2;
        s0 = peg$currPos;
        s1 = peg$parseroot_identifier();
        if (s1 !== peg$FAILED) {
            s2 = peg$parsesingular_query_segments();
            peg$savedPos = s0;
            s0 = peg$f45(s2);
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        return s0;
    }
    function peg$parsecurrent_node_identifier() {
        var s0;
        if (input.charCodeAt(peg$currPos) === 64) {
            s0 = peg$c29;
            peg$currPos++;
        }
        else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e45);
            }
        }
        return s0;
    }
    function peg$parsefunction_name_char() {
        var s0;
        s0 = input.charAt(peg$currPos);
        if (peg$r16.test(s0)) {
            peg$currPos++;
        }
        else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e46);
            }
        }
        return s0;
    }
    function peg$parsefrac() {
        var s0, s1, s2, s3;
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 46) {
            s1 = peg$c1;
            peg$currPos++;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e2);
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$parseDIGIT();
            if (s3 !== peg$FAILED) {
                while (s3 !== peg$FAILED) {
                    s2.push(s3);
                    s3 = peg$parseDIGIT();
                }
            }
            else {
                s2 = peg$FAILED;
            }
            if (s2 !== peg$FAILED) {
                s1 = [s1, s2];
                s0 = s1;
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        return s0;
    }
    function peg$parseexp() {
        var s0, s1, s2, s3, s4;
        s0 = peg$currPos;
        s1 = input.charAt(peg$currPos);
        if (s1.toLowerCase() === peg$c30) {
            peg$currPos++;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e47);
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = input.charAt(peg$currPos);
            if (peg$r17.test(s2)) {
                peg$currPos++;
            }
            else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e48);
                }
            }
            if (s2 === peg$FAILED) {
                s2 = null;
            }
            s3 = [];
            s4 = peg$parseDIGIT();
            if (s4 !== peg$FAILED) {
                while (s4 !== peg$FAILED) {
                    s3.push(s4);
                    s4 = peg$parseDIGIT();
                }
            }
            else {
                s3 = peg$FAILED;
            }
            if (s3 !== peg$FAILED) {
                s1 = [s1, s2, s3];
                s0 = s1;
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        return s0;
    }
    function peg$parsesingular_query_segments() {
        var s0, s1, s2, s3, s4;
        s0 = peg$currPos;
        s1 = [];
        s2 = peg$currPos;
        s3 = peg$parseS();
        s4 = peg$parsename_segment();
        if (s4 === peg$FAILED) {
            s4 = peg$parseindex_segment();
        }
        if (s4 !== peg$FAILED) {
            peg$savedPos = s2;
            s2 = peg$f46(s4);
        }
        else {
            peg$currPos = s2;
            s2 = peg$FAILED;
        }
        while (s2 !== peg$FAILED) {
            s1.push(s2);
            s2 = peg$currPos;
            s3 = peg$parseS();
            s4 = peg$parsename_segment();
            if (s4 === peg$FAILED) {
                s4 = peg$parseindex_segment();
            }
            if (s4 !== peg$FAILED) {
                peg$savedPos = s2;
                s2 = peg$f46(s4);
            }
            else {
                peg$currPos = s2;
                s2 = peg$FAILED;
            }
        }
        peg$savedPos = s0;
        s1 = peg$f47(s1);
        s0 = s1;
        return s0;
    }
    function peg$parseLCALPHA() {
        var s0;
        s0 = input.charAt(peg$currPos);
        if (peg$r18.test(s0)) {
            peg$currPos++;
        }
        else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e49);
            }
        }
        return s0;
    }
    function peg$parsename_segment() {
        var s0, s1, s2, s3;
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 91) {
            s1 = peg$c3;
            peg$currPos++;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e4);
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$parsename_selector();
            if (s2 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 93) {
                    s3 = peg$c5;
                    peg$currPos++;
                }
                else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$e6);
                    }
                }
                if (s3 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s0 = peg$f48(s2);
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 46) {
                s1 = peg$c1;
                peg$currPos++;
            }
            else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e2);
                }
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$parsemember_name_shorthand();
                if (s2 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s0 = peg$f49(s2);
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        return s0;
    }
    function peg$parseindex_segment() {
        var s0, s1, s2, s3;
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 91) {
            s1 = peg$c3;
            peg$currPos++;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e4);
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$parseindex_selector();
            if (s2 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 93) {
                    s3 = peg$c5;
                    peg$currPos++;
                }
                else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$e6);
                    }
                }
                if (s3 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s0 = peg$f50(s2);
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        return s0;
    }
    peg$result = peg$startRuleFunction();
    if (options.peg$library) {
        return /** @type {any} */ ({
            peg$result,
            peg$currPos,
            peg$FAILED,
            peg$maxFailExpected,
            peg$maxFailPos
        });
    }
    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
        return peg$result;
    }
    else {
        if (peg$result !== peg$FAILED && peg$currPos < input.length) {
            peg$fail(peg$endExpectation());
        }
        throw peg$buildStructuredError(peg$maxFailExpected, peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null, peg$maxFailPos < input.length
            ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
            : peg$computeLocation(peg$maxFailPos, peg$maxFailPos));
    }
}
const peg$allowedStartRules = [
    "jsonpath_query"
];
exports.StartRules = peg$allowedStartRules;
//# sourceMappingURL=parser.js.map