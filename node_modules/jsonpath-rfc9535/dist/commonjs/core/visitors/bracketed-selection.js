"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = visitBracketedSelection;
const assertions_ts_1 = require("../../utils/assertions.js");
const guards_ts_1 = require("../../utils/guards.js");
const path_ts_1 = require("../path.js");
const filter_selector_ts_1 = __importDefault(require("./filter-selector.js"));
const index_selector_ts_1 = __importDefault(require("./index-selector.js"));
const name_selector_ts_1 = __importDefault(require("./name-selector.js"));
const slice_selector_ts_1 = __importDefault(require("./slice-selector.js"));
const wildcard_selector_ts_1 = __importDefault(require("./wildcard-selector.js"));
function visitBracketedSelection(ctx, item, node) {
    for (const selector of node.selectors) {
        switch (selector.type) {
            case "NameSelector":
                if ((0, guards_ts_1.isStackItemWithObjectValue)(item)) {
                    (0, name_selector_ts_1.default)(ctx, item, selector);
                }
                break;
            case "SliceSelector":
                if ((0, guards_ts_1.isStackItemWithArrayValue)(item)) {
                    (0, slice_selector_ts_1.default)(ctx, item, selector);
                }
                break;
            case "IndexSelector": {
                if ((0, guards_ts_1.isStackItemWithArrayValue)(item)) {
                    (0, index_selector_ts_1.default)(ctx, item, selector);
                }
                break;
            }
            case "WildcardSelector":
                (0, wildcard_selector_ts_1.default)(ctx, item);
                break;
            case "FilterSelector": {
                if ((0, guards_ts_1.isStackItemWithArrayValue)(item)) {
                    visitFilterSelectorForArrayItem(ctx, item, selector);
                }
                else if ((0, guards_ts_1.isStackItemWithObjectValue)(item)) {
                    visitFilterSelectorForObjectItem(ctx, item, selector);
                }
                break;
            }
            default:
                (0, assertions_ts_1.assertDefinedNodeType)(selector);
        }
    }
}
function visitFilterSelectorForArrayItem(ctx, { root, path, value, index }, node) {
    for (let i = 0; i < value.length; i++) {
        (0, filter_selector_ts_1.default)(ctx, {
            root,
            path: (0, path_ts_1.joinPathWithKey)(path, i),
            value: value[i],
            index,
        }, node);
    }
}
function visitFilterSelectorForObjectItem(ctx, { root, path, value, index }, node) {
    for (const key of Object.keys(value)) {
        (0, filter_selector_ts_1.default)(ctx, {
            root,
            path: (0, path_ts_1.joinPathWithKey)(path, key),
            value: value[key],
            index,
        }, node);
    }
}
//# sourceMappingURL=bracketed-selection.js.map