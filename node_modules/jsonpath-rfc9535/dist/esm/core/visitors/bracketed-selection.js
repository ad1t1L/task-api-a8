import { assertDefinedNodeType } from "../../utils/assertions.js";
import { isStackItemWithArrayValue, isStackItemWithObjectValue, } from "../../utils/guards.js";
import { joinPathWithKey } from "../path.js";
import visitFilterSelector from "./filter-selector.js";
import visitIndexSelector from "./index-selector.js";
import visitNameSelector from "./name-selector.js";
import visitSliceSelector from "./slice-selector.js";
import visitWildcardSelector from "./wildcard-selector.js";
export default function visitBracketedSelection(ctx, item, node) {
    for (const selector of node.selectors) {
        switch (selector.type) {
            case "NameSelector":
                if (isStackItemWithObjectValue(item)) {
                    visitNameSelector(ctx, item, selector);
                }
                break;
            case "SliceSelector":
                if (isStackItemWithArrayValue(item)) {
                    visitSliceSelector(ctx, item, selector);
                }
                break;
            case "IndexSelector": {
                if (isStackItemWithArrayValue(item)) {
                    visitIndexSelector(ctx, item, selector);
                }
                break;
            }
            case "WildcardSelector":
                visitWildcardSelector(ctx, item);
                break;
            case "FilterSelector": {
                if (isStackItemWithArrayValue(item)) {
                    visitFilterSelectorForArrayItem(ctx, item, selector);
                }
                else if (isStackItemWithObjectValue(item)) {
                    visitFilterSelectorForObjectItem(ctx, item, selector);
                }
                break;
            }
            default:
                assertDefinedNodeType(selector);
        }
    }
}
function visitFilterSelectorForArrayItem(ctx, { root, path, value, index }, node) {
    for (let i = 0; i < value.length; i++) {
        visitFilterSelector(ctx, {
            root,
            path: joinPathWithKey(path, i),
            value: value[i],
            index,
        }, node);
    }
}
function visitFilterSelectorForObjectItem(ctx, { root, path, value, index }, node) {
    for (const key of Object.keys(value)) {
        visitFilterSelector(ctx, {
            root,
            path: joinPathWithKey(path, key),
            value: value[key],
            index,
        }, node);
    }
}
//# sourceMappingURL=bracketed-selection.js.map